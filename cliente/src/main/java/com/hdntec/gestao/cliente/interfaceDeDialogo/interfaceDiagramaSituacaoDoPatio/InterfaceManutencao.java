/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InterfaceManutencao.java
 *
 * Created on 12/06/2009, 13:38:49
 */

package com.hdntec.gestao.cliente.interfaceDeDialogo.interfaceDiagramaSituacaoDoPatio;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingConstants;

import com.hdntec.gestao.cliente.messagens.InterfaceMensagem;
import com.hdntec.gestao.cliente.util.datahora.CalendarioHoraCFlex;
import com.hdntec.gestao.cliente.util.tabela.CFlexStockyardFuncoesTabela;
import com.hdntec.gestao.cliente.util.tabela.ColunaTabela;
import com.hdntec.gestao.cliente.util.telas.DSSStockyardTelaUtil;
import com.hdntec.gestao.domain.planta.dao.MetaMaquinaDoPatioDAO;
import com.hdntec.gestao.domain.planta.entity.status.Manutencao;
import com.hdntec.gestao.domain.planta.entity.status.ManutencaoMaquina;
import com.hdntec.gestao.domain.planta.enums.PeriodicidadeEnum;
import com.hdntec.gestao.exceptions.ErroSistemicoException;
import com.hdntec.gestao.exceptions.ValidacaoCampoException;
import com.hdntec.gestao.util.PropertiesUtil;
import com.hdntec.gestao.util.datahora.DSSStockyardTimeUtil;

/**
 * 
 * @author guilherme
 */
public abstract class InterfaceManutencao extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = -8956079360331823461L;

	private InterfaceMensagem interfaceMensagem;
	
	private JPopupMenu popMnuManipularInterdicao;
	
	/** Lista de colunas da tabela de informacoes das balizas selecionadas */
	private List<ColunaTabela> listaColunaInformacoes;

	private List<ManutencaoMaquina> listaManutencoes;

	private List<ManutencaoMaquina> listaManutencoesRemovidas = new ArrayList<ManutencaoMaquina>();

	/** Vetor com os dados ta tabela de informacoes da baliza */
	private Vector vDatasManutencoes;

	private Boolean operacaoCanceladaPeloUsuario;

	/** Constantes da tabela de informacoes das balizas selecionadas */
	private final Integer COL_DATA_INI = 0;
	private final Integer COL_DATA_FIM = 1;
	private final Integer COL_REPETICAO = 2;
		
	private ControladorDSP controladorDSP;

	private ManutencaoMaquina manutencaoSelecionada;

	private InterfaceMaquinaDoPatio maquina;
	
	/** Creates new form InterfaceManutencao */
	public InterfaceManutencao(ControladorDSP controladorDSP, InterfaceMaquinaDoPatio maquina) {
				
		this.maquina = maquina;
		this.controladorDSP = controladorDSP;
		
		if (listaManutencoes == null) {
            listaManutencoes = new ArrayList<ManutencaoMaquina>();
            listaManutencoes.addAll(this.maquina.getMaquinaDoPatioVisualizada().getMetaMaquina().getListaManutencao());
        
        }
		
		initComponents();
		
		dtInicioCalendarioHoraCFlex.limpaDataHora();
		dtFimCalendarioHoraCFlex.limpaDataHora();
		vDatasManutencoes = new Vector();
		this.criaColunasDatasManutencao();
		
		
		this.atualizaTabelaDatasManutencoes();
		//this.transformaListaEmHash();
	}

	/**
	 * Cria a lista de colunas para exibicao das informacoes das balizas
	 * selecionadas
	 */
	private void criaColunasDatasManutencao() {

	    criaPopMenuParaInterdicao();
	    listaColunaInformacoes = new ArrayList<ColunaTabela>();
	   ColunaTabela colInfo;
		       
		colInfo = new ColunaTabela();
		colInfo.setAlinhamento(SwingConstants.LEADING);
		colInfo.setEditar(Boolean.FALSE);
		colInfo.setLargura(180);
		colInfo.setRedimensionar(Boolean.FALSE);
		colInfo.setTitulo(PropertiesUtil
				.getMessage("label.data.inicio.manutencao"));
		listaColunaInformacoes.add(colInfo);

		colInfo = new ColunaTabela();
		colInfo.setAlinhamento(SwingConstants.LEADING);
		colInfo.setEditar(Boolean.FALSE);
		colInfo.setLargura(180);
		colInfo.setRedimensionar(Boolean.FALSE);
		colInfo.setTitulo(PropertiesUtil
				.getMessage("label.data.fim.manutencao"));
		listaColunaInformacoes.add(colInfo);
		
		colInfo = new ColunaTabela();
		colInfo.setAlinhamento(SwingConstants.LEADING);
		colInfo.setEditar(Boolean.FALSE);
		colInfo.setLargura(130);
		colInfo.setRedimensionar(Boolean.FALSE);
		colInfo.setTitulo(PropertiesUtil
				.getMessage("label.periodicidade"));
		listaColunaInformacoes.add(colInfo);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaManutencoesCFlexStockyardJTable = new com.hdntec.gestao.cliente.util.tabela.bean.CFlexStockyardJTable();
        jPanel2 = new javax.swing.JPanel();
        lblDtInicio = new javax.swing.JLabel();
        lblDtFim = new javax.swing.JLabel();
        rbCorretiva = new javax.swing.JRadioButton();
        rbPreventiva = new javax.swing.JRadioButton();
        btnConfirmar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnConcluirEdicao = new javax.swing.JButton();
        dtFimCalendarioHoraCFlex = new CalendarioHoraCFlex();
        dtInicioCalendarioHoraCFlex = new CalendarioHoraCFlex();
        cmbRepeticao = new JComboBox(PeriodicidadeEnum.values());

        setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Agenda de Manutenções"));
        jPanel1.setLayout(null);

        listaManutencoesCFlexStockyardJTable.setModel(new javax.swing.table.DefaultTableModel(new Object [][] {},
            new String [] {}
        ));
        
        listaManutencoesCFlexStockyardJTable.addMouseListener(new java.awt.event.MouseAdapter() {
        	@Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
        		listaManutencoesCFlexStockyardJTableMouseClicked(evt);
        	}
        });
        
        jScrollPane1.setViewportView(listaManutencoesCFlexStockyardJTable);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 20, 640, 140);

        add(jPanel1);
        jPanel1.setBounds(10, 150, 660, 174);
        buttonGroup1.add(rbCorretiva);
        buttonGroup1.add(rbPreventiva);



        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Manutenção"));
        jPanel2.setLayout(null);

        lblDtInicio.setText("Data de inicio da manutenção");
        jPanel2.add(lblDtInicio);

        lblDtInicio.setBounds(10, 22, 168, 14);
        jPanel2.add(dtInicioCalendarioHoraCFlex);
        dtInicioCalendarioHoraCFlex.setBounds(180, 20, 195, 20);

        lblDtFim.setText("Data de fim da manutenção");
        jPanel2.add(lblDtFim);

        lblDtFim.setBounds(10, 52, 160, 14);
        
        jPanel2.add(dtFimCalendarioHoraCFlex);
        dtFimCalendarioHoraCFlex.setBounds(180, 50, 195, 20);

        rbCorretiva.setText("Manutenção corretiva");
        rbCorretiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCorretivaActionPerformed(evt);
            }
        });
        jPanel2.add(rbCorretiva);

        rbCorretiva.setBounds(490, 20, 160, 23);

        rbPreventiva.setText("Manutenção preventiva");
        rbPreventiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPreventivaActionPerformed(evt);
            }
        });
        jPanel2.add(rbPreventiva);

        rbPreventiva.setBounds(490, 43, 160, 20);
        add(cmbRepeticao);
        cmbRepeticao.setBounds(560, 80, 95, 21);
        
        add(jPanel2);

        jPanel2.setBounds(10, 10, 660, 100);

        //btnConfirmar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icones/ok.png"))); // NOI18N
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });
        add(btnConfirmar);

        btnConfirmar.setBounds(555, 120, 113, 23);

       // btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icones/exit.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        add(btnCancelar);

        btnCancelar.setBounds(280, 120, 110, 23);


       // btnConcluirEdicao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icones/confirmar.png"))); // NOI18N
        btnConcluirEdicao.setText("Adicionar");
        btnConcluirEdicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcluirEdicaoActionPerformed(evt);
            }
        });
        add(btnConcluirEdicao);

        btnConcluirEdicao.setBounds(400, 120, 145, 23);
        
        this.setPreferredSize(new Dimension(680,400));

    }// </editor-fold>//GEN-END:initComponents

        private void rbCorretivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCorretivaActionPerformed
        	cmbRepeticao.setEnabled(false);        	
        	cmbRepeticao.setSelectedItem(PeriodicidadeEnum.NUNCA);
        }//GEN-LAST:event_rbCorretivaActionPerformed
        
        private void rbPreventivaActionPerformed(java.awt.event.ActionEvent evt){
        	cmbRepeticao.setEnabled(true);
        }

	/**
	 * Confirma as alteracoes na lista de manutencoes
	 * 
	 * @param evt
	 */
	private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {
		
		this.operacaoCanceladaPeloUsuario = Boolean.FALSE;
		
		
		listaManutencoes.removeAll(listaManutencoesRemovidas);
		maquina.getMaquinaDoPatioVisualizada().getMetaMaquina().getListaManutencao().clear();
		maquina.getMaquinaDoPatioVisualizada().getMetaMaquina().addManutencao(listaManutencoes);
		
		MetaMaquinaDoPatioDAO dao = new MetaMaquinaDoPatioDAO();		
		try {            
            for (ManutencaoMaquina m : listaManutencoesRemovidas) {
                m.setMaquina(null);                
            }    
            //daoM.remover(listaManutencoesRemovidas);
            dao.salvaMetaMaquinaDoPatio(maquina.getMaquinaDoPatioVisualizada().getMetaMaquina());
        } catch (ErroSistemicoException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
		
		
	/*	// ativando a necessidade da consolidacao
		controladorDSP.getInterfaceDSP().getInterfaceInicial()
			.getControladorInterfaceInicial().getPlanejamento().ativarNecessidadeDeConsolidacao();
	*/	
		// obtendo o JDialog que adicionou o painel
		DSSStockyardTelaUtil.getParentDialog(this).setVisible(false);
	}
	
	

	/**
	 * Conclui a edicao de um periodo de manutencao, adicionando ela a lista ou
	 * alterando
	 * 
	 * @param evt
	 */
	private void btnConcluirEdicaoActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			this.validaDados();
			ManutencaoMaquina manutencao = new ManutencaoMaquina();
			
			 manutencao.setDataInicial(DSSStockyardTimeUtil.criaDataComString(dtInicioCalendarioHoraCFlex.getDataHora(), PropertiesUtil
                             .buscarPropriedade("formato.campo.datahora")));
			 
             manutencao.setDataFinal(DSSStockyardTimeUtil.criaDataComString(dtFimCalendarioHoraCFlex.getDataHora(), PropertiesUtil
                             .buscarPropriedade("formato.campo.datahora")));
             
             manutencao.setPeriodicidade((PeriodicidadeEnum) cmbRepeticao.getSelectedItem());

             listaManutencoes.add(manutencao);
          
			this.atualizaTabelaDatasManutencoes();			
			visibilidadeRadioButton(true);
			
		} catch (ValidacaoCampoException ex) {
			controladorDSP.getInterfaceInicial().desativarMensagemProcessamento();
			interfaceMensagem = new InterfaceMensagem();
			interfaceMensagem.setTipoMensagem(InterfaceMensagem.MENSAGEM_TIPO_ALERTA);
			interfaceMensagem.setDescricaoMensagem(ex.getMessage());
			controladorDSP.ativarMensagem(interfaceMensagem);
		}

	}

	private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {
		fecharJanela();
		this.getParent().getParent().getParent().getParent().setVisible(false);
	}

	/**
	 * Captura a acao de click sobre para selecao de um periodo de manutencao
	 * 
	 * @param evt
	 */
	private void listaManutencoesCFlexStockyardJTableMouseClicked( java.awt.event.MouseEvent evt) {
        if (evt.getButton() == MouseEvent.BUTTON3) {
            int linhaSelecionada = listaManutencoesCFlexStockyardJTable.rowAtPoint(evt.getPoint());
            listaManutencoesCFlexStockyardJTable.setRowSelectionInterval(linhaSelecionada, linhaSelecionada);
        
            this.manutencaoSelecionada = listaManutencoes.get(linhaSelecionada);
            popMnuManipularInterdicao.show(listaManutencoesCFlexStockyardJTable, evt.getX(), evt.getY());

        }

	}

	/**
	 * Metodo criado abstrato, pois sua implementacao sera na classe que o
	 * instanciou
	 */
	public abstract void fecharJanela();

	/**
	 * Atualiza as informacoes na tabela de lista de balizas selecionadas para
	 * edicao
	 * 
	 * @throws ErroSistemicoException
	 */
	private void atualizaTabelaDatasManutencoes() {
		vDatasManutencoes.removeAllElements();
		listaManutencoes.removeAll(listaManutencoesRemovidas);
		for (Manutencao manutencao : listaManutencoes) {
			Object[] dados = new Object[3];					
			dados[COL_DATA_INI] = DSSStockyardTimeUtil.formatarData(manutencao.getDataInicial(), PropertiesUtil.buscarPropriedade("formato.campo.datahora"));
			dados[COL_DATA_FIM] = DSSStockyardTimeUtil.formatarData(manutencao.getDataFinal(), PropertiesUtil.buscarPropriedade("formato.campo.datahora"));
			dados[COL_REPETICAO] = manutencao.getPeriodicidade().toString();			
			vDatasManutencoes.add(new Vector(Arrays.asList(dados)));
		}
		try {
			CFlexStockyardFuncoesTabela.setInformacoesTabela(listaManutencoesCFlexStockyardJTable, vDatasManutencoes, listaColunaInformacoes);
		} catch (ErroSistemicoException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Faz as validacoes das datas de manutencao que serao inseridas.
	 * @throws ValidacaoCampoException
	 */
	private void validaDados() throws ValidacaoCampoException {
		//Verifica de a data inicial da manutencao eh maior que a final
		if (!dtInicioCalendarioHoraCFlex.getDataHoraDate().before(dtFimCalendarioHoraCFlex.getDataHoraDate())) {
			throw new ValidacaoCampoException(PropertiesUtil.getMessage("valida.datas.manutencao.inicial.maior.final"));
		}
		
		//Verifica para uma manutencao diaria, se o periodo de manutencao eh maior que 24horas.
		if (cmbRepeticao.getSelectedItem().equals(PeriodicidadeEnum.DIARIA)) {
			if (DSSStockyardTimeUtil.calculaTempoHorasEntreDatas(dtInicioCalendarioHoraCFlex.getDataHoraDate(), dtFimCalendarioHoraCFlex.getDataHoraDate()) > 24) {
				throw new ValidacaoCampoException(PropertiesUtil.getMessage("valida.datas.manutencao.maior.24horas"));
			}
		}

		for (Manutencao manutencao : listaManutencoes) {
			
			//Verifica, para as manutencoes que nao se repetem, se existe outra manutencao no mesmo periodo.
			if(manutencao.getPeriodicidade().equals(PeriodicidadeEnum.NUNCA) && cmbRepeticao.getSelectedItem().equals(PeriodicidadeEnum.NUNCA)) {
				String dataIniManutencaoTabela = DSSStockyardTimeUtil.formatarData(dtInicioCalendarioHoraCFlex.getDataHoraDate(),PropertiesUtil.buscarPropriedade("formato.campo.datahora"));
				String dataFimManutencaoTabela = DSSStockyardTimeUtil.formatarData(dtFimCalendarioHoraCFlex.getDataHoraDate(), PropertiesUtil.buscarPropriedade("formato.campo.datahora"));
				String dataIniManutencaoNaLista = DSSStockyardTimeUtil.formatarData(manutencao.getDataInicial(), PropertiesUtil.buscarPropriedade("formato.campo.datahora"));
				String dataFimManutencaoNaLista = DSSStockyardTimeUtil.formatarData(manutencao.getDataFinal(), PropertiesUtil.buscarPropriedade("formato.campo.datahora"));

				if ((dtInicioCalendarioHoraCFlex.getDataHoraDate().after(manutencao.getDataInicial()) && dtInicioCalendarioHoraCFlex.getDataHoraDate().before(manutencao.getDataFinal()))
						|| (dtFimCalendarioHoraCFlex.getDataHoraDate().after(manutencao.getDataInicial()) && dtFimCalendarioHoraCFlex.getDataHoraDate().before(manutencao.getDataFinal()))) {
					throw new ValidacaoCampoException(PropertiesUtil.getMessage("valida.intervalo.manutencao"));
				}

				if (dataIniManutencaoTabela.equals(dataIniManutencaoNaLista) && dataFimManutencaoTabela.equals(dataFimManutencaoNaLista)) {
					throw new ValidacaoCampoException(PropertiesUtil.getMessage("valida.intervalo.manutencao"));
				}
			}
		}
		if(rbCorretiva.isEnabled() && rbPreventiva.isEnabled()){
			//esta validaÃ§Ã£o Ã© usada apenas para novas manutencoes
			if(!rbCorretiva.isSelected() && !rbPreventiva.isSelected()){
				throw new ValidacaoCampoException(PropertiesUtil.getMessage("aviso.tipo.manutencao.nao.selecionado"));
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConcluirEdicao;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDtFim;
    private javax.swing.JLabel lblDtInicio;
    private com.hdntec.gestao.cliente.util.tabela.bean.CFlexStockyardJTable listaManutencoesCFlexStockyardJTable;
    private javax.swing.JRadioButton rbCorretiva;
    private javax.swing.JRadioButton rbPreventiva;
    private com.hdntec.gestao.cliente.util.datahora.CalendarioHoraCFlex dtFimCalendarioHoraCFlex;
	private com.hdntec.gestao.cliente.util.datahora.CalendarioHoraCFlex dtInicioCalendarioHoraCFlex;
	private javax.swing.JComboBox cmbRepeticao;
    // End of variables declaration//GEN-END:variables

	public Boolean getOperacaoCanceladaPeloUsuario() {
		return operacaoCanceladaPeloUsuario;
	}

	public void setOperacaoCanceladaPeloUsuario(
			Boolean operacaoCanceladaPeloUsuario) {
		this.operacaoCanceladaPeloUsuario = operacaoCanceladaPeloUsuario;
	}


	
	
	/**
	 * Altera a visibilidade dos botoes de radio, pois apos a escolha do tipo de manutenÃ§ao(preventiva e corretiva) nÃ£o se pode editar o tipo escolhido  
	 * @param visivel
	 */
	private void visibilidadeRadioButton(boolean visivel){
		rbCorretiva.setEnabled(visivel);
		rbPreventiva.setEnabled(visivel);
		cmbRepeticao.setEnabled(visivel);
	}

	 private void criaPopMenuParaInterdicao() {

	        popMnuManipularInterdicao = new JPopupMenu();
	      
	        //JMenuItem
	        JMenuItem mnuExcluirCampanha = new JMenuItem();
	        mnuExcluirCampanha.setText("Excluir");
	        mnuExcluirCampanha.addActionListener(new java.awt.event.ActionListener() {

	            @Override
	            public void actionPerformed(ActionEvent evt) {
	                excluiDadosInterdicao();
	            }
	        });
	        popMnuManipularInterdicao.add(mnuExcluirCampanha);
	    }
	 
	 private void excluiDadosInterdicao()  {
         if (this.manutencaoSelecionada != null) {
             StringBuffer buffer = new StringBuffer();             
             buffer.append(this.manutencaoSelecionada.getDataInicial());
             buffer.append(" - ");
             buffer.append(this.manutencaoSelecionada.getDataFinal());
             buffer.append("\n Periodicidade : ");
             buffer.append(this.manutencaoSelecionada.getPeriodicidade());
             
             JLabel pergunta = new JLabel("Deseja excluir a Manutenção " + buffer.toString());
             
             pergunta.setFont(new Font("Tahoma", Font.PLAIN, 11));
             int confirm = JOptionPane.showOptionDialog(null, pergunta, PropertiesUtil.getMessage("popup.atencao"),
                             JOptionPane.YES_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
 
             if (confirm == JOptionPane.NO_OPTION) {
                 return;
             } else {                    
                 listaManutencoesRemovidas.add(this.manutencaoSelecionada);                    
                 atualizaTabelaDatasManutencoes();
             }
         }           
     }
 
}
