/*
 * InterfaceMovimentarNavio.java
 *
 * Created on 03/09/2009
 */
package com.hdntec.gestao.cliente.interfaceDeDialogo.interfaceDeFilaDeNavios;

import java.awt.Font;
import java.awt.Rectangle;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import com.hdntec.gestao.cliente.messagens.InterfaceMensagem;
import com.hdntec.gestao.cliente.util.ComboBoxRederer;
import com.hdntec.gestao.cliente.util.datahora.CalendarioHoraCFlex;
import com.hdntec.gestao.domain.navios.StatusNavioEnum;
import com.hdntec.gestao.domain.plano.entity.SituacaoPatio;
import com.hdntec.gestao.domain.plano.enums.TipoAtividadeEnum;
import com.hdntec.gestao.domain.planta.entity.status.Pier;
import com.hdntec.gestao.domain.vo.atividades.AtividadeAtracarDesAtracarNavioVO;
import com.hdntec.gestao.exceptions.AtividadeException;
import com.hdntec.gestao.util.PropertiesUtil;
import com.hdntec.gestao.util.datahora.DSSStockyardTimeUtil;

/**
 * Interface GUI para acao de desatracar navio e retornar navio para fila de navios
 * @author Bruno Gomes
 */
public class InterfaceMovimentarNavio extends javax.swing.JDialog
{
   private AtividadeAtracarDesAtracarNavioVO movimentacaoVO;
   private InterfaceNavio interfaceNavio;

   private boolean operacaoCanceladaPeloUsuario = Boolean.FALSE;
    //tooltip do Status do navio
    private String[] tooltips = {PropertiesUtil.getMessage("tooltip.nabarra"), PropertiesUtil.getMessage("tooltip.embarcado")};

   /** Creates new form InterfaceMovimentarNavio */
   public InterfaceMovimentarNavio(java.awt.Frame parent, boolean modal, InterfaceNavio interfaceNavio)
   {
      super(parent, modal);
      initComponents();
      this.interfaceNavio = interfaceNavio;

      insereToolTipComboBox();
      carregaDados();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel1 = new javax.swing.JPanel();
      lbNomeNavio = new javax.swing.JLabel();
      txtNomeNavio = new javax.swing.JTextField();
      lbStatus = new javax.swing.JLabel();
      comboStatus = new javax.swing.JComboBox();
      lbDataSaida = new javax.swing.JLabel();
      jbConfirmar = new javax.swing.JButton();
      jbCancelar = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      dtSaidaDenavio = new com.hdntec.gestao.cliente.util.datahora.CalendarioHoraCFlex();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle(PropertiesUtil.getMessage("titulo.movimentar.navio"));

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPanel1.setLayout(null);

      lbNomeNavio.setText(PropertiesUtil.getMessage("relatorio.planoDeRecuperacao.navio"));
      jPanel1.add(lbNomeNavio);
      lbNomeNavio.setBounds(10, 40, 90, 14);
      jPanel1.add(txtNomeNavio);
      txtNomeNavio.setBounds(140, 40, 180, 20);

      lbStatus.setText(PropertiesUtil.getMessage("label.status.sem.dois.pontos"));
      jPanel1.add(lbStatus);
      lbStatus.setBounds(10, 80, 60, 14);

      comboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { StatusNavioEnum.BARRA.toString(), StatusNavioEnum.EMBARCADO.toString() }));
      jPanel1.add(comboStatus);
      comboStatus.setBounds(140, 80, 90, 20);

      lbDataSaida.setText(PropertiesUtil.getMessage("label.data.saida"));
      jPanel1.add(lbDataSaida);
      lbDataSaida.setBounds(10, 120, 90, 14);

      jbConfirmar.setText(PropertiesUtil.getMessage("botao.confirmar"));
      jbConfirmar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jbConfirmarActionPerformed(evt);
         }
      });
      jPanel1.add(jbConfirmar);
      jbConfirmar.setBounds(263, 190, 100, 23);

      jbCancelar.setText(PropertiesUtil.getMessage("botao.cancelar"));
      jbCancelar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jbCancelarActionPerformed(evt);
         }
      });
      jPanel1.add(jbCancelar);
      jbCancelar.setBounds(143, 190, 100, 23);
      jPanel1.add(jSeparator1);
      jSeparator1.setBounds(10, 180, 360, 2);
      jPanel1.add(dtSaidaDenavio);
      dtSaidaDenavio.setBounds(140, 120, 196, 20);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void jbConfirmarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbConfirmarActionPerformed
    {//GEN-HEADEREND:event_jbConfirmarActionPerformed
       if (executaAtividade()) {
          this.operacaoCanceladaPeloUsuario = Boolean.FALSE;
          // chegando ate o JDialog
          this.setVisible(false);
       }

    }//GEN-LAST:event_jbConfirmarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jbCancelarActionPerformed
    {//GEN-HEADEREND:event_jbCancelarActionPerformed
       this.operacaoCanceladaPeloUsuario = true;
       this.setVisible(false);
    }//GEN-LAST:event_jbCancelarActionPerformed

   public CalendarioHoraCFlex getDtSaidaDenavio()
   {
      return dtSaidaDenavio;
   }

   private void carregaDados()
   {
      this.txtNomeNavio.setText(interfaceNavio.getNavioVisualizado().getNomeNavio());
      this.txtNomeNavio.setEnabled(false);
      this.dtSaidaDenavio.limpaDataHora();
      this.dtSaidaDenavio.setDataHora(DSSStockyardTimeUtil.obterDataHoraUltimaSituacaoParaAtividades(interfaceNavio.getControladorInterfaceFilaDeNavios().
                      getInterfaceInicial().getInterfaceInicial().getInterfaceDSP().getControladorDSP().getInterfaceInicial().getInterfaceInicial().getSituacaoPatioExibida().getDtInicio()));
      //seta posicao da janela
      Rectangle rec = interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().getInterfaceInicial().getBounds();
      this.setLocation(rec.width / 2, rec.height / 2);
   }

   private boolean executaAtividade()
   {
	   try {

		   SituacaoPatio situacaoPatio = interfaceNavio.getControladorInterfaceFilaDeNavios().
		   getInterfaceInicial().getInterfaceInicial().getSituacaoPatioExibida();

		   boolean continuarAtracacao = true;
		   //verifica se o pier esta sob interdicao
		   if (existePierSobInterdicao(situacaoPatio)) {
			   JLabel pergunta = new JLabel("Pier sob interdição! Deseja continuar?");//PropertiesUtil.getMessage("mensagem.option.pane.confirma.consolidacao.plano"));
			   pergunta.setFont(new Font("Tahoma", Font.PLAIN, 11));
			   int confirm = JOptionPane.showOptionDialog(
					   interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().getInterfaceInicial(),
					   pergunta,
					   PropertiesUtil.getMessage("mensagem.option.pane.tipo.atencao") ,
					   JOptionPane.YES_OPTION,
					   JOptionPane.INFORMATION_MESSAGE,
					   null,
					   null,
					   null);

			   if (confirm != JOptionPane.YES_OPTION) {
				   continuarAtracacao = false;
			   }
		   }
		   if (continuarAtracacao) {
			   if (comboStatus.getSelectedItem().equals(StatusNavioEnum.BARRA.toString())) {

			    // valida a volta do navio para fila
                   interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().validarAtividadeDeRecuperacaoEmExecucao(interfaceNavio.getNavioVisualizado());
				   //voltar navio para fila com status na Barra
				   retornarNavioParaFila();

				   interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().getInterfaceInicial().montaInterfaceDSP();
			   }
			   else {

			    // valida a volta do navio para fila
                   interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().validarAtividadeDeRecuperacaoEmExecucao(interfaceNavio.getNavioVisualizado());
			      
                   embarcarNavio();
				   //verificar necessidade de atualizar DSP
				   //            interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().getInterfaceInicial().atualizarDSP();
				   interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().exibirUltimaSituacaoPatio();

			   }
		   }
	   }
	   catch (AtividadeException ex) {
		   interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().desativarMensagemProcessamento();
		   InterfaceMensagem interfaceMensagem = new InterfaceMensagem();
		   interfaceMensagem.setTipoMensagem(InterfaceMensagem.MENSAGEM_TIPO_ALERTA);
		   interfaceMensagem.setDescricaoMensagem(ex.getMessage());
		   interfaceNavio.getControladorInterfaceFilaDeNavios().ativarMensagem(interfaceMensagem);

		   //         Logger.getLogger(InterfaceMovimentarNavio.class.getName()).log(Level.SEVERE, null, ex);
		   return false;
	   }

	   return true;
   }
      
  /**
   * 
   * @param situacaoPatio
   * @return
   */
   private boolean existePierSobInterdicao(SituacaoPatio situacaoPatio) {
	   boolean status = false;
	   try {   

		   
		   Date data = situacaoPatio.getDtInicio();
		   SimpleDateFormat sdf = new SimpleDateFormat();
		   sdf.applyPattern(PropertiesUtil.buscarPropriedade("format.atualizacao.timestamp"));
		   String str = sdf.format(data);
		   Date dataSituacao = sdf.parse(str);

		   if (situacaoPatio != null) {

			   for (Pier pier : situacaoPatio.getPlanta().getListaPiers(situacaoPatio.getDtInicio())) {

				   if (pier.getMetaPier().pierInterditado(situacaoPatio.getDtInicio())) {
					status = true;
				   }
			   }
		   }
	   } catch (ParseException e) {
		   // TODO Auto-generated catch block
		   e.printStackTrace();
	   }
	   return status;
   }
      

   public boolean getOperacaoCanceladaPeloUsuario()
   {
      return operacaoCanceladaPeloUsuario;
   }

   private void retornarNavioParaFila()
   {
       try {
           movimentacaoVO = new AtividadeAtracarDesAtracarNavioVO();
           movimentacaoVO.setTipoAtividade(TipoAtividadeEnum.NAVIO_BARRA);
           movimentacaoVO.setDataInicio(this.dtSaidaDenavio.getDataHoraDate());           
           movimentacaoVO.setMetaBercoDestino(interfaceNavio.getBercoDeAtracacao().getBercoVisualizada().getMetaBerco());  
           movimentacaoVO.setMetaNavio(interfaceNavio.getNavioVisualizado().getMetaNavio());
           interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().verificaMovimentacaoNavio(movimentacaoVO);
       
       } catch (AtividadeException e) {
           interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().desativarMensagemProcessamento();
           InterfaceMensagem interfaceMensagem = new InterfaceMensagem();
           interfaceMensagem.setTipoMensagem(InterfaceMensagem.MENSAGEM_TIPO_ALERTA);
           interfaceMensagem.setDescricaoMensagem(e.getMessage());
           interfaceNavio.getControladorInterfaceFilaDeNavios().ativarMensagem(interfaceMensagem);           
       }

   }

   private void embarcarNavio()
   {
       try {
           movimentacaoVO = new AtividadeAtracarDesAtracarNavioVO();
           movimentacaoVO.setTipoAtividade(TipoAtividadeEnum.SAIDA_DE_NAVIO);
           movimentacaoVO.setDataInicio(this.dtSaidaDenavio.getDataHoraDate());           
           movimentacaoVO.setMetaBercoDestino(interfaceNavio.getBercoDeAtracacao().getBercoVisualizada().getMetaBerco());  
           movimentacaoVO.setMetaNavio(interfaceNavio.getNavioVisualizado().getMetaNavio());
           interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().verificaMovimentacaoNavio(movimentacaoVO);
       
       } catch (AtividadeException e) {
           interfaceNavio.getControladorInterfaceFilaDeNavios().getInterfaceInicial().desativarMensagemProcessamento();
           InterfaceMensagem interfaceMensagem = new InterfaceMensagem();
           interfaceMensagem.setTipoMensagem(InterfaceMensagem.MENSAGEM_TIPO_ALERTA);
           interfaceMensagem.setDescricaoMensagem(e.getMessage());
           interfaceNavio.getControladorInterfaceFilaDeNavios().ativarMensagem(interfaceMensagem);           
       }

   }
   
    private void insereToolTipComboBox() {
        ComboBoxRederer comboBoxRederer = new ComboBoxRederer();
        comboBoxRederer.setTooltips(tooltips);
        //adiciona do comboBox status do Navio
        comboStatus.setRenderer(comboBoxRederer);
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JComboBox comboStatus;
   private com.hdntec.gestao.cliente.util.datahora.CalendarioHoraCFlex dtSaidaDenavio;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JButton jbCancelar;
   private javax.swing.JButton jbConfirmar;
   private javax.swing.JLabel lbDataSaida;
   private javax.swing.JLabel lbNomeNavio;
   private javax.swing.JLabel lbStatus;
   private javax.swing.JTextField txtNomeNavio;
   // End of variables declaration//GEN-END:variables
}
